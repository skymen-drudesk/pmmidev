<?php

/**
 * @file
 * Includes PMMI Sales Agent Directory extensions.
 *
 * SALES AGENT DIRECTORY WORKFLOW (1 - authenticated user, 2 - privileged user):
 *   Register new company:
 *   [1,2] DRAFT -> DRAFT (create unpublished node)
 *     [1,2] DRAFT -> DRAFT (save changes, keep node unpublished)
 *     [2] DRAFT - reject -> NEEDS WORK (notify that changes are incorrect)
 *       [1,2] NEEDS WORK -> DRAFT (save changes, keep node unpublished)
 *     [2] DRAFT - approve -> PUBLISHED (publish new changes)
 *       [1,2] PUBLISHED -> DRAFT (create new unpublished revision)
 *
 *   Register existed company:
 *   [1,2] PUBLISHED -> DRAFT (create new unpublished revision)
 *     [2] DRAFT - reject -> DRAFT (don't publish, keep in revision)
 *     [2] DRAFT - approve -> PUBLISHED (publish new changes)
 */

use Drupal\Core\Database\Database;
use Drupal\Component\Datetime\DateTimePlus;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;

// Define sales agent content ID.
define('PMMI_SALES_AGENT_CONTENT', 'company');
// Define PMMI sales agent mail types.
define('PMMI_SALES_AGENT_MAIL_MASS_REMIND', 'mass_email_remind');
define('PMMI_SALES_AGENT_MAIL_LISTING_NEW', 'mail_listing_new');
define('PMMI_SALES_AGENT_MAIL_LISTING_UPDATE', 'mail_listing_update');

/**
 * Implements hook_cron().
 */
function pmmi_sales_agent_cron() {
  // Send mass email remind messages.
  pmmi_sales_agent_remind_send();
  // Notify internal PMMI admin that some companies is pending approval.
  pmmi_sales_agent_internal_admin_remind_send();
}

/**
 * Implements hook_mail().
 */
function pmmi_sales_agent_mail($key, &$message, $params) {
  switch ($key) {
    case 'pmmi_sales_agent_mass':
    case 'mass_email_remind':
    case 'pmmi_sales_agent_listing_agent':
    case 'pmmi_sales_agent_listing_admin':
      $token_service = \Drupal::token();
      $variables = array('node' => $params['node']);

      // Use default email if it is not specific.
      $from = !empty($params['from']) ? $params['from'] : \Drupal::config('system.site')->get('mail');

      $message['from'] = $from;
      $message['subject'] = $params['subject'];
      $message['body'][] = $token_service->replace($params['body'], $variables);
      break;
  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter()
 */
function pmmi_sales_agent_field_widget_moderation_state_default_form_alter(&$element, FormStateInterface $form_state, $context) {
  // Add additional process callback to perform additional manipulation we need.
  $element['#process'][] = 'pmmi_sales_agent_widget_moderation_state_process_actions';
}

/**
 * Implements hook_form_alter().
 */
function pmmi_sales_agent_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    case 'node_company_form':
    case 'node_company_edit_form':
      $build_info = $form_state->getBuildInfo();

      // The field descriptions are converted into tooltips (in accordance with
      foreach (['field_main_phone_number', 'field_fax_number'] as $field) {
        if (isset($form[$field])) {
          $form[$field]['widget'][0]['value']['#smart_description'] = FALSE;
        }
      }

      // Add simple flag to make sure that company was changed using node form.
      // It will trigger additional updates, which should be ignored if node was
      // saved in other way.
      $node = $build_info['callback_object']->getEntity();
      $node->register = TRUE;
      break;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function pmmi_sales_agent_form_pmmi_company_search_block_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Add extra submit handler to log any usage of the search agent directory.
  $form['#submit'][] = 'pmmi_sales_agent_log_search_stats';
}

/**
 * Extra submit handler to save search statistic.
 *
 * @see pmmi_sales_agent_form_pmmi_company_search_block_form_alter()
 */
function pmmi_sales_agent_log_search_stats(&$form, FormStateInterface $form_state) {
  $values = $form_state->getValues();

  // Select the countries which were searched to add them to usage stats.
  $countries_searched = [];
  if ($values['country_code']) {
    $countries = $form_state->getValue('country_list');
    foreach ($values['country_code'] as $country_code) {
      $countries_searched[] = $countries[$country_code];
    }
  }

  // Creates the statistic point.
  $connection = Database::getConnection();
  $connection->insert('pmmi_sales_agent_search_stats')->fields([
    'uid' => \Drupal::currentUser()->id(),
    'date' => REQUEST_TIME,
    'countries_searched' => $countries_searched ? implode(', ', $countries_searched) : '',
  ])->execute();
}

/**
 * Implements hook_ENTITY_TYPE_presave() for node entities.
 */
function pmmi_sales_agent_node_presave(EntityInterface $node) {
  if (!empty($node->register)) {
    $new_date = DateTimePlus::createFromTimestamp(time())->format('Y-m-d');
    $node->set('field_last_updated_on', $new_date);

    // Remove queue of mass email remind messages.
    if (!$node->isNew()) {
      $connection = Database::getConnection();
      $connection->delete('pmmi_sales_agent_mails')
        ->condition('nid', $node->id())
        ->execute();
    }
  }
}

/**
 * Process callback to alter action buttons.
 *
 * @see pmmi_sales_agent_field_widget_moderation_state_default_form_alter()
 */
function pmmi_sales_agent_widget_moderation_state_process_actions($element, FormStateInterface $form_state, array &$form) {
  $callback_obj = $form_state->getBuildInfo()['callback_object'] ?: NULL;

  if (!$callback_obj || !($callback_obj instanceof \Drupal\node\NodeForm)) {
    return $element;
  }

  // Override workflow states in accordance with own requirements.
  $node = $callback_obj->getEntity();
  if ($node && ($node->getType() == PMMI_SALES_AGENT_CONTENT)) {
    // In some reason, the node after creation is not flagged as new. Let's add
    // additional flag to make sure that node is new.
    $form['#new'] = $node->isNew() ? TRUE : FALSE;

    foreach ($form['actions'] as $key => &$action) {
      switch ($key) {
        case 'moderation_state_draft':
          $action['#value'] = t('Register');
          $action['#submit'][] = 'pmmi_sales_agent_notify_pmmi_admin';
          break;

        case 'moderation_state_needs_work':
          $action['#value'] = t('Reject');
          $action['#submit'][] = 'pmmi_sales_agent_notify_sales_agent';
          break;

        case 'moderation_state_published':
          $action['#value'] = t('Approve');
          $action['#submit'][] = 'pmmi_sales_agent_notify_sales_agent';
          break;
      }

      if (strpos($key, 'moderation_state_') === 0) {
        unset($action['#dropbutton']);
      }
    }
  }

  return $element;
}

/**
 * Notify internal PMMI admin about new changes.
 */
function pmmi_sales_agent_notify_pmmi_admin(&$form, FormStateInterface $form_state) {
  $node = $form_state->getBuildInfo()['callback_object']->getEntity();
  $ms = \Drupal::config('pmmi_sales_agent.mail_settings');
  $current_langcode = \Drupal::languageManager()->getCurrentLanguage()->getId();

  // Prepare a message and send it to the internal PMMI admin.
  $params = [
    'subject' => $form['#new'] ? $ms->get('listing_create.subject') : $ms->get('listing_review.subject'),
    'body' => $form['#new'] ? $ms->get('listing_create.body') : $ms->get('listing_review.body'),
    // Field "field_primary_contact_email" is required.
    'from' => $node->get('field_primary_contact_email')->getValue()[0]['value'],
    'node' => $node,
  ];

  $to = $ms->get('mail_notification_address');
  \Drupal::service('plugin.manager.mail')
    ->mail('pmmi_sales_agent', 'pmmi_sales_agent_listing_agent', $to, $current_langcode, $params);

  // Add an email to the queue.
  $connection = Database::getConnection();
  $connection->insert('pmmi_sales_agent_mails')->fields([
    'nid' => $node->id(),
    'type' => $form['#new'] ? PMMI_SALES_AGENT_MAIL_LISTING_NEW : PMMI_SALES_AGENT_MAIL_LISTING_UPDATE,
    'sending_date' => REQUEST_TIME + $ms->get('remind_period'),
  ])->execute();

  // Show an alert to notify that listing should be reviewed.
  drupal_set_message(t('Thank you for your interest in PMMIâ€™s Agent Database. Your submission was submitted successfully. We will notify you by email when your profile has been approved or rejected.'));
}

/**
 * Notify sales agent that his changes have been approved.
 */
function pmmi_sales_agent_notify_sales_agent(&$form, FormStateInterface $form_state) {
  $triggering_element = $form_state->getTriggeringElement();
  $approve = $triggering_element['#moderation_state'] == 'published' ? TRUE : FALSE;

  $node = $form_state->getBuildInfo()['callback_object']->getEntity();

  // PMMI has answered, so remove an email from the queue.
  $connection = Database::getConnection();
  $connection->delete('pmmi_sales_agent_mails')
    ->condition('nid', $node->id())
    ->execute();

  $ms = \Drupal::config('pmmi_sales_agent.mail_settings');
  $current_langcode = \Drupal::languageManager()->getCurrentLanguage()->getId();

  // Prepare a message and send it to the sales agent.
  $params = [
    'subject' => $approve ? $ms->get('listing_approve.subject') : $ms->get('listing_reject.subject'),
    'body' => $approve ? $ms->get('listing_approve.body') : $ms->get('listing_reject.body'),
    'from' => $ms->get('mail_notification_address'),
    'node' => $node,
  ];

  $to = $node->get('field_primary_contact_email')->getValue()[0]['value'];
  \Drupal::service('plugin.manager.mail')
    ->mail('pmmi_sales_agent', 'pmmi_sales_agent_listing_admin', $to, $current_langcode, $params);
}

/**
 * Sends mass email remind messages.
 */
function pmmi_sales_agent_remind_send() {
  $connection = Database::getConnection();

  // Select all companies which should receive remind message.
  $query = $connection->select('pmmi_sales_agent_mails', 'sam');
  $query->fields('sam', ['mid', 'nid']);
  $query->condition('sam.type', PMMI_SALES_AGENT_MAIL_MASS_REMIND);
  $query->condition('sam.sending_date', REQUEST_TIME, '<');
  $nids = $query->execute()->fetchAllKeyed();

  foreach ($nids as $mid => $nid) {
    if ($node = \Drupal\node\Entity\Node::load($nid)) {
      $mail_manager = \Drupal::service('plugin.manager.mail');
      $mail_settings = \Drupal::config('pmmi_sales_agent.mail_settings');

      $params = [
        'subject' => $mail_settings->get('ss_update_reminder.subject'),
        'body' => $mail_settings->get('ss_update_reminder.body'),
        'from' => $mail_settings->get('mail_notification_address'),
        'node' => $node,
      ];

      // Let's send remind message.
      $to = $node->get('field_primary_contact_email')->getValue()[0]['value'];
      $langcode = \Drupal::languageManager()->getCurrentLanguage()->getId();

      $result = $mail_manager->mail('pmmi_sales_agent', 'mass_email_remind', $to, $langcode, $params, TRUE);
      if ($result['result'] === TRUE) {
        // Remove a record as mail has been sent successfully.
        $connection->delete('pmmi_sales_agent_mails')
          ->condition('mid', $mid)
          ->execute();
      }
    }
  }
}

/**
 * Sends a remind message to internal PMMI admin.
 */
function pmmi_sales_agent_internal_admin_remind_send() {
  $connection = Database::getConnection();
  $mail_types = [
    PMMI_SALES_AGENT_MAIL_LISTING_NEW,
    PMMI_SALES_AGENT_MAIL_LISTING_UPDATE,
  ];

  // Select all companies which should should send an email.
  $query = $connection->select('pmmi_sales_agent_mails', 'sam');
  $query->fields('sam', ['mid', 'nid']);
  $query->condition('sam.type', $mail_types, 'IN');
  $query->condition('sam.sending_date', REQUEST_TIME, '<');
  $nids = $query->execute()->fetchAllKeyed();

  foreach ($nids as $mid => $nid) {
    if ($node = \Drupal\node\Entity\Node::load($nid)) {
      $mail_manager = \Drupal::service('plugin.manager.mail');
      $mail_settings = \Drupal::config('pmmi_sales_agent.mail_settings');

      $params = [
        'subject' => $mail_settings->get('listing_review.subject'),
        'body' => $mail_settings->get('listing_review.body'),
        'node' => $node,
      ];

      // Let's send remind message.
      $to = $mail_settings->get('mail_notification_address');
      $langcode = \Drupal::languageManager()->getCurrentLanguage()->getId();

      $result = $mail_manager->mail('pmmi_sales_agent', 'pmmi_sales_agent_listing_admin', $to, $langcode, $params, TRUE);
      if ($result['result'] === TRUE) {
        // Update a record as mail has been sent successfully.
        $connection->update('pmmi_sales_agent_mails')
          ->fields(['sending_date' => REQUEST_TIME + $mail_settings->get('remind_period')])
          ->condition('mid', $mid)
          ->execute();
      }
    }
  }
}
