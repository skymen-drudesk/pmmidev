<?php

/**
 * @file
 * Includes PMMI Sales Agent Directory extensions.
 *
 * SALES AGENT DIRECTORY WORKFLOW:
 *   Register new company:
 *   DRAFT -> DRAFT (create unpublished node)
 *     DRAFT - reject -> DRAFT (save changes, keep node unpublished)
 *     DRAFT - approve -> PUBLISHED (publish new changes)
 *       PUBLISHED -> DRAFT (create new unpublished revision)
 *
 *   Register existed company:
 *   PUBLISHED -> DRAFT (create new unpublished revision)
 *     DRAFT - reject -> DRAFT (don't publish, keep in revision)
 *     DRAFT - approve -> PUBLISHED (publish new changes)
 */

use Drupal\Component\Datetime\DateTimePlus;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;

// Define sales agent content ID.
define('PMMI_SALES_AGENT_CONTENT', 'company');

/**
 * Implements hook_cron().
 */
function pmmi_sales_agent_cron() {
  foreach (pmmi_sales_agent_remind_mail_get_contacts() as $nid) {
    pmmi_sales_agent_remind_send($nid);
  }
}

/**
 * Implements hook_mail().
 */
function pmmi_sales_agent_mail($key, &$message, $params) {
  switch ($key) {
    case 'pmmi_sales_agent_mass':
    case 'pmmi_sales_agent_mass_remind':
    case 'pmmi_sales_agent_listing_new':
      $token_service = \Drupal::token();
      $variables = array('node' => $params['node']);

      // Use default email if it is not specific.
      $from = !empty($params['from']) ? $params['from'] : \Drupal::config('system.site')->get('mail');

      $message['from'] = $from;
      $message['subject'] = $params['subject'];
      $message['body'][] = $token_service->replace($params['body'], $variables);
      break;
  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter()
 */
function pmmi_sales_agent_field_widget_moderation_state_default_form_alter(&$element, FormStateInterface $form_state, $context) {
  // Add additional process callback to perform additional manipulation we need.
  $element['#process'][] = 'pmmi_sales_agent_widget_moderation_state_process_actions';
}

/**
 * Implements hook_form_alter().
 */
function pmmi_sales_agent_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    case 'node_company_form':
    case 'node_company_edit_form':
      $build_info = $form_state->getBuildInfo();

      // The field descriptions are converted into tooltips (in accordance with
      foreach (['field_main_phone_number', 'field_fax_number'] as $field) {
        if (isset($form[$field])) {
          $form[$field]['widget'][0]['value']['#smart_description'] = FALSE;
        }
      }

      // Add simple flag to make sure that company was changed using node form.
      // It will trigger additional updates, which should be ignored if node was
      // saved in other way.
      $node = $build_info['callback_object']->getEntity();
      $node->register = TRUE;
      break;
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave() for node entities.
 */
function pmmi_sales_agent_node_presave(EntityInterface $node) {
  if (!empty($node->register)) {
    $new_date = DateTimePlus::createFromTimestamp(time())->format('Y-m-d');
    $node->set('field_last_updated_on', $new_date);
    $node->set('field_mass_email_queue', NULL);
  }
}

/**
 * Process callback to alter action buttons.
 *
 * @see pmmi_sales_agent_field_widget_moderation_state_default_form_alter()
 */
function pmmi_sales_agent_widget_moderation_state_process_actions($element, FormStateInterface $form_state, array &$form) {
  $build_info = $form_state->getBuildInfo();

  // Override workflow states in accordance with own requirements.
  if (isset($build_info['callback_object'])
    && ($build_info['callback_object'] instanceof \Drupal\node\NodeForm)) {

    // In some reason, the node after creation is not flagged as new. Let's add
    // additional flag to make sure that node is new.
    $node = $build_info['callback_object']->getEntity();
    $form['#new'] = $node->isNew() ? TRUE : FALSE;

    // Let's allow draft (Register) only. We do not need another workflow states
    // on the add/edit company pages. The approve/reject (change workflow state
    // operation) actions will be available on the latest revision page.
    $form['actions']['moderation_state_draft']['#value'] = t('Register');
    $form['actions']['moderation_state_published']['#access'] = FALSE;
    unset($form['actions']['moderation_state_published']['#dropbutton']);

    // Notify internal PMMI admin about new changes have been added to the
    // company node.
    $form['actions']['moderation_state_draft']['#submit'][] = 'pmmi_sales_agent_notify_pmmi_admin';
  }

  return $element;
}

/**
 * Submit handler to notify internal PMMI admin about new changes.
 */
function pmmi_sales_agent_notify_pmmi_admin(&$form, FormStateInterface $form_state) {
  $build_info = $form_state->getBuildInfo();
  $node = $build_info['callback_object']->getEntity();

  $ms = \Drupal::config('pmmi_sales_agent.mail_settings');
  $current_langcode = \Drupal::languageManager()->getCurrentLanguage()->getId();

  // Prepare a message and send it to the internal PMMI admin.
  $params = [
    'subject' => $form['#new'] ? $ms->get('listing_create.subject') : $ms->get('listing_review.subject'),
    'body' => $form['#new'] ? $ms->get('listing_create.body') : $ms->get('listing_review.body'),
    // Field "field_primary_contact_email" is required.
    'from' => $node->get('field_primary_contact_email')->getValue()[0]['value'],
    'node' => $node,
  ];

  $to = $ms->get('mail_notification_address');
  \Drupal::service('plugin.manager.mail')
    ->mail('pmmi_sales_agent', 'pmmi_sales_agent_listing_new', $to, $current_langcode, $params);
}

/**
 * Helper function to get all companies, which should receive remind mass email.
 *
 * @return array
 *   An array of node ID's, which should receive remind message.
 */
function pmmi_sales_agent_remind_mail_get_contacts() {
  $result = array();

  // Get all company ID's which have remind step and this step less or equal 3.
  $query = \Drupal::entityQuery('node');
  $query->condition('type', PMMI_SALES_AGENT_CONTENT);
  $query->condition('field_mass_email_queue', 3, '<=');
  $nids = $query->execute();

  if ($nids && ($nodes = \Drupal\node\Entity\Node::loadMultiple($nids))) {
    $mm_config = \Drupal::service('config.factory')
      ->getEditable('pmmi_sales_agent.mail_mass_settings');

    foreach ($nodes as $node) {
      // @todo: do we need additional check here (looks like no, in accordance
      // with the query above)?
      $mm_status = $node->get('field_mass_email_queue')->getValue()[0]['value'];

      // Use this simple formula to get companies which are ready to get remind
      // message.
      $formula = $mm_status * $mm_config->get('remind_period') + $mm_config->get('last_run');

      if ($formula < REQUEST_TIME) {
        $result[] = $node->id();
      }
    }
  }

  return $result;
}

/**
 * Sends remind message.
 *
 * @param $nid
 *   The node ID.
 */
function pmmi_sales_agent_remind_send($nid) {
  $node = \Drupal\node\Entity\Node::load($nid);
  if ($node && $node->hasField('field_primary_contact_email')) {
    $to = $node->get('field_primary_contact_email')->getValue();

    // Check if email is valid.
    if (!empty($to[0]['value']) && \Drupal::service('email.validator')->isValid($to[0]['value'])) {
      // Compose and send remind email.
      $mailManager = \Drupal::service('plugin.manager.mail');
      $mail_settings = \Drupal::config('pmmi_sales_agent.mail_settings');
      $current_langcode = \Drupal::languageManager()->getCurrentLanguage()->getId();

      $params = [
        'subject' => $mail_settings->get('ss_update_reminder.subject'),
        'body' => $mail_settings->get('ss_update_reminder.body'),
        'from' => $mail_settings->get('mail_notification_address'),
        'node' => $node,
      ];

      $mailManager->mail('pmmi_sales_agent', 'pmmi_sales_agent_mass_remind', $to[0]['value'], $current_langcode, $params);

      // Update mass mail status.
      if ($mm_status = $node->get('field_mass_email_queue')->getValue()) {
        $node->set('field_mass_email_queue', ++$mm_status[0]['value']);
        $node->save();
      }
    }
  }
}
