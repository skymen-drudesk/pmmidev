<?php
/**
 * @file
 * The primary PHP file for this theme.
 */

use CommerceGuys\Addressing\Country\CountryRepository;
use Drupal\Component\Utility\Html;
use Drupal\Core\Url;
use Drupal\Core\Link;
use Drupal\Core\Template\Attribute;
use Drupal\image\Entity\ImageStyle;
use Drupal\views\Views;
use Drupal\Core\Form\FormStateInterface;


/**
 * Implements hook_preprocess_html().
 */
function pmmi_bootstrap_preprocess_html(&$variables) {
  $front_class = (\Drupal::service('path.matcher')->isFrontPage()) ? 'front' : 'not-front';
  $variables['attributes']['class'][] = $front_class;
}

/**
 * Implements hook_preprocess_block().
 */
function pmmi_bootstrap_preprocess_block(&$variables) {
  switch ($variables['base_plugin_id']) {
    case 'system_menu_block':
      // Add specific class to utility menus.
      if (strpos($variables['plugin_id'], 'utility-navigation') !== FALSE) {
        $variables['attributes']['class'][] = 'utility-navigation';
      }
      break;

    case 'pmmi_twitter_block':
      $url = Url::fromUri('https://www.twitter.com/@PMMIorg', [
        'attributes' => [
          'target' => '_blank',
        ],
      ]);
      $variables['label'] = $variables['configuration']['block_title'];
      $variables['subtitle'] = Link::fromTextAndUrl('@PMMIorg', $url);
      break;

    case 'pmmi_facebook_block':
      $page_id = $variables['configuration']['page_id'];
      $url = Url::fromUri('https://www.facebook.com/' . $page_id, [
        'attributes' => [
          'target' => '_blank',
        ],
      ]);
      $variables['label'] = $variables['configuration']['block_title'];
      $variables['subtitle'] = Link::fromTextAndUrl("facebook.com/{$page_id}", $url);
      break;

    case 'system_branding_block':
      if ($variables['content']['site_logo']['#access']
      && \Drupal::service('path.matcher')->isFrontPage()
      && $front_logo_path = theme_get_setting('front_logo_path')) {
        $front_logo_uri = file_url_transform_relative(file_create_url($front_logo_path));
        $variables['site_logo'] = $front_logo_uri;
      }
      break;

    case 'block_content':
      $variables['attributes']['class'][] = Html::cleanCssIdentifier($variables['content']['#bundle']);
      break;
  }
}

/**
 * Implements hook_preprocess_ds_entity_view().
 */
function pmmi_bootstrap_preprocess_ds_entity_view(&$vars) {
  $attributes = new Attribute();
  $attributes['class'] = [
    Html::cleanCssIdentifier($vars['content']['#bundle']),
    Html::cleanCssIdentifier('mode-' . $vars['content']['#view_mode']),
  ];
  switch ($vars['content']['#bundle']) {
    case 'certification_test':
      $coming = $vars['content']['#node']->get('field_cert_test_coming')->value;
      if (!empty($coming)) {
        $attributes['class'][] = 'comming-soon';
      }
      break;

    case 'video':
      if ($vars['content']['#view_mode'] == 'default') {
        $attributes['data-item-id'] = $vars['content']['#node']->id();
      }
      break;

    case 'image_slide':
      if ($vars['content']['#view_mode'] == 'image_slider') {
        $slide_type = $vars['content']['#block_content']->get('field_slide_type')->value;
        $ds_config = $vars['content']['#ds_configuration'];
        $hide_slide = ($slide_type == 'image') ? 'field_video' : 'field_image';
        $key = array_search($hide_slide, $ds_config['regions']['image']);
        unset($vars['content']['image'][$key]);
      }
      break;

    case 'text_image':
    case 'text':
    case 'containers':
      $center = $vars['content']['#block_content']->get('field_center_text')->value;
      if ($center) {
        $attributes['class'][] = 'centered';
      }
      break;

    case 'news':
      $bg_color = $vars['content']['#block_content']->get('field_head_bkg_color_class')->value;
      $attributes['class'][] = !empty($bg_color) ? 'color-blue' : 'color-red';
      break;

    case 'company':
      $node = $vars['content']['#node'];

      // Attach some address info to the "General line 1" region.
      if ($address = $node->get('field_address')->getValue()) {
        $country_repository = new CountryRepository();
        $countries = $country_repository->getList();

        $state = !empty($address[0]['administrative_area']) ? $address[0]['administrative_area'] : '';
        $country = $countries[$address[0]['country_code']];

        $new_element = array(
          '#markup' => $state ? implode(', ', array($state, $country)) : $country,
          '#prefix' => '<div class="address-simple">',
          '#suffix' => '</div>',
        );
        array_unshift($vars['content']['general_line_1'], $new_element);
      }

      // Attach "Trade shows" view to the "Footer" region.
      if ($view = Views::getView('company_trade_shows_contacts')) {
        $view->setDisplay('block_1');
        $view->setArguments([$node->id()]);
        $view->preExecute();
        $view->execute();

        if ($content = $view->render()) {
          $the_title_render_array = [
            '#markup' => t('Attending upcoming trade shows'),
            '#prefix' => '<div class="block-label">',
            '#suffix' => '</div>',
          ];

          $vars['content']['footer'][] = $the_title_render_array;
          $vars['content']['footer'][] = $content;
        }
      }

      // 'Profile updated' section.
      $changed = $node->getChangedTime();
      $vars['content']['footer'][] = array(
        '#markup' => t('Profile last updated @date', array('@date' => date('M. n, Y', $changed))),
        '#prefix' => '<div class="profile-updated">',
        '#suffix' => '</div>',
      );
      break;

    case 'icons':
      $cols = 0;
      foreach ($vars['content']['main'] as $block) {
        if (!empty($block[0])) {
          $cols++;
        }
      }
      $attributes['class'][] = 'cols-' . $cols;
      break;
  }

  switch ($vars['content']['#view_mode']) {
    case 'accordion':
      if (isset($vars['content']['#node'])) {
        $vars['content']['#tab_id'] = $vars['content']['#node']->id();
      }
      elseif (isset($vars['content']['#block_content'])) {
        $vars['content']['#tab_id'] = Html::getUniqueId($vars['content']['#block_content']->id());
      }
      break;
  }

  $vars['content']['#attrs'] = $attributes;
}

/**
 * Implements hook_page_attachments_alter().
 */
function pmmi_bootstrap_page_attachments_alter(array &$page) {

  $breakpoints = \Drupal::service('breakpoint.manager')->getBreakpointsByGroup('pmmi_bootstrap');
  if (!empty($breakpoints)) {
    $media_queries = array();
    foreach ($breakpoints as $id => $breakpoint) {
      $media_queries[str_replace('pmmi_bootstrap.', '', $id)] = $breakpoint->getMediaQuery();
    }
    $page['#attached']['drupalSettings']['responsive']['breakpoints'] = $media_queries;
  }
}


/**
 * Implements hook_preprocess_HOOK().
 */
function pmmi_bootstrap_preprocess_viewfield_formatter_default(&$variables) {
  $element = $variables['element'];
  $variables['title'] = $element['#view']->getTitle();
}


/**
 * Prepare variables for tb_megamenu_submenu.
 */
function pmmi_bootstrap_preprocess_tb_megamenu_submenu(&$vars) {
  $parent = $vars['parent'];
  $metadata = $parent->link->getMetaData();
  $entity = \Drupal::entityTypeManager()->getStorage('menu_link_content')->load($metadata['entity_id']);
  if ($entity && $submenu_background = $entity->submenu_background->entity) {
    $background_uri = $submenu_background->getFileUri();
    $styled_image_url = file_url_transform_relative(file_create_url($background_uri));
    $style = "background-image: url(" . $styled_image_url . ");";
    if (!empty($vars['attributes']['style'])) {
      $vars['attributes']['style'] .= ' ' . $style;
    }
    else {
      $vars['attributes']['style'] = $style;
    }
  }
}

/**
 * Implements hook_form_system_theme_settings_alter().
 */
function pmmi_bootstrap_form_system_theme_settings_alter(&$form, &$form_state) {
  // Front logo settings, only available when $form['logo'] element exists.
  if (isset($form['logo'])) {
    $form['front_logo'] = array(
      '#type' => 'details',
      '#title' => t('Front page logo image'),
      '#open' => TRUE,
      '#group' => 'global',
    );
    $form['front_logo']['front_default_logo'] = array(
      '#type' => 'checkbox',
      '#title' => t('Use the logo supplied by the theme'),
      '#default_value' => theme_get_setting('front_default_logo', 'pmmi_bootstrap'),
      '#tree' => FALSE,
    );
    $form['front_logo']['settings'] = array(
      '#type' => 'container',
      '#states' => array(
        // Hide the logo settings when using the default logo.
        'invisible' => array(
          'input[name="front_default_logo"]' => array('checked' => TRUE),
        ),
      ),
    );
    $form['front_logo']['settings']['front_logo_path'] = array(
      '#type' => 'textfield',
      '#title' => t('Path to custom logo'),
      '#default_value' => theme_get_setting('front_logo_path', 'pmmi_bootstrap'),
    );
    $form['front_logo']['settings']['front_logo_upload'] = array(
      '#type' => 'file',
      '#title' => t('Upload logo image'),
      '#maxlength' => 40,
      '#description' => t("If you don't have direct file access to the server, use this field to upload your logo.")
    );
  }
  $form['#validate'][] = 'pmmi_bootstrap_form_system_theme_settings_validate';
  $form['#submit'][] = 'pmmi_bootstrap_form_system_theme_settings_submit';
}

/**
 * Validate function for "pmmi_bootstrap" theme settings.
 *
 * @see pmmi_bootstrap_form_system_theme_settings_alter()
 */
function pmmi_bootstrap_form_system_theme_settings_validate(array &$form, FormStateInterface $form_state) {
  // Handle file uploads.
  $validators = array('file_validate_is_image' => array());

  // Check for a new uploaded logo.
  $file = file_save_upload('front_logo_upload', $validators, FALSE, 0);
  if (isset($file)) {
    // File upload was attempted.
    if ($file) {
      // Put the temporary file in form_values so we can save it on submit.
      $form_state->setValue('front_logo_upload', $file);
    }
    else {
      // File upload failed.
      $form_state->setErrorByName('front_logo_upload', $this->t('The logo could not be uploaded.'));
    }
  }
}


/**
 * Submit function for "pmmi_bootstrap" theme settings.
 *
 * @see pmmi_bootstrap_form_system_theme_settings_alter()
 */
function pmmi_bootstrap_form_system_theme_settings_submit(array &$form, FormStateInterface &$form_state) {
  $values = &$form_state->getValues();

  // If the user uploaded a new logo or favicon, save it to a permanent location
  // and use it in place of the default theme-provided file.
  if (!empty($values['front_logo_upload'])) {
    $filename = file_unmanaged_copy($values['front_logo_upload']->getFileUri());
    $values['front_default_logo'] = 0;
    $values['front_logo_path'] = $filename;
  }
  unset($values['front_logo_upload']);
}
